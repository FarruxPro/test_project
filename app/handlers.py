from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from dotenv import load_dotenv
from sqlalchemy import select, delete
from app.database.models import User, Subscription, async_session

import os
import re
import app.keyboards as kb

load_dotenv()
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS').split(',')))
router = Router()

class Reg(StatesGroup):
     user = State()
     email = State()
     number = State()

class SubscriptionForm(StatesGroup):
    name = State()
    description = State()
    id_channels = State()


@router.message(CommandStart())
async def reg_start(message: types.Message, state: FSMContext):
     user_id = message.from_user.id
     # –ø—Ä–æ–≤–µ—Ä—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
     async with async_session() as session:
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()


     if user:
          # —É–¥–ª –ø–µ—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          try:
               await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
          except Exception as e:
               print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
               
          # 
          await message.answer('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –Ω–∞ –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏—Ö –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                               reply_markup=kb.main)
          return
     # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é
     await state.set_state(Reg.user)
     await message.answer('–ü—Ä–∏–≤–µ—Ç! üëã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–º –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§.–ò.–û.):')


@router.message(Reg.user)
async def reg_full_name(message: Message, state:FSMContext):
     full_name = message.text.strip()

     if not re.fullmatch(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë]+ [A-Za-z–ê-–Ø–∞-—è–Å—ë]+ [A-Za-z–ê-–Ø–∞-—è–Å—ë]+", full_name):
          await message.answer('–ü—Ä–∏–≤–µ—Ç! üëã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–º –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§.–ò.–û.):')
          return
     
     await state.update_data(user=full_name)
     await state.set_state(Reg.email)
     await message.answer('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Email-–∞–¥—Ä–µ—Å –¥–ª—è —Å–≤—è–∑–∏:')

@router.message(Reg.email)
async def reg_email(message: Message, state: FSMContext):
     email = message.text.strip()

     if not re.fullmatch(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", email):
          await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Email-–∞–¥—Ä–µ—Å –¥–ª—è —Å–≤—è–∑–∏:')
          return
     
     await state.update_data(email=email)
     await state.set_state(Reg.number)
     await message.answer('–û—Ç–ª–∏—á–Ω–æ! –ù–∞–∫–æ–Ω–µ—Ü, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')


@router.message(Reg.number)
async def reg_number(message: Message, state: FSMContext):
     number = message.text.strip()

     if not re.fullmatch(r"^\+\d+$", number):
          await message.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ c +')
          return

     await state.update_data(number=number)
     data = await state.get_data()

     async with async_session() as session:
          new_user = User(
               user_name=message.from_user.username,
               user_id=message.from_user.id,
               user_phone=int(data['number'].replace('+', '')),
               user_email=data['email']
          )

          session.add(new_user)
          await session.commit()

     await message.answer('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –Ω–∞ –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏—Ö –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                          reply_markup=kb.main)
     await state.clear()



@router.callback_query(F.data == 'school_programs')
async def school_programs(callback: CallbackQuery):
     await callback.message.delete()
     await callback.answer('')
     await callback.message.answer('–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n1. üìö –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ\n2. üöÄ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.',
                                   reply_markup=kb.school_programs)
     
@router.callback_query(F.data == 'main')
async def school_programs(callback: CallbackQuery):
     await callback.message.delete()
     await callback.answer('')
     await callback.message.answer('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –Ω–∞ –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏—Ö –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                   reply_markup=kb.main)
     

@router.callback_query(F.data == 'my_subscriptions')
async def my_subscriptions(callback: CallbackQuery):
     await callback.message.delete()
     await callback.answer('')
     await callback.message.answer('üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!\n–£ –í–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞:\n\n\n1. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ\n–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å-20 –¥–Ω–µ–π\n\n\n2. –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è\n–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å-15 –¥–Ω–µ–π\n\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–µ –¥–µ—Ç–∞–ª–∏',
                                   reply_markup=kb.my_subscriptions)
     
@router.callback_query(F.data == 'no_subscription')
async def no_subscription(callback: CallbackQuery):
     await callback.message.delete()
     await callback.answer('')
     await callback.message.answer('üòï–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–æ–¥–ø–∏—Å–∫–∏ –®–∫–æ–ª—ã".\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
                                   reply_markup=kb.no_subscription)
     
@router.callback_query(F.data == 'school_subscription_training')
async def school_subscription_training(callback: CallbackQuery):
     await callback.message.delete()
     await callback.answer('')
     await callback.message.answer('üìö –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏e\n\n\n–û–ø–∏—Å–∞–Ω–∏–µ: –î–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ª—É—á—à–∏–º —É—á–µ–±–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º, –∫—É—Ä—Å–∞–º –∏ –≤–µ–±–∏–Ω–∞—Ä–∞–º –ø–æ —Ç–µ–º–µ.\n\n\n–í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã:\n- –ö–∞–Ω–∞–ª 1: –û–±—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–º\n- –ö–∞–Ω–∞–ª 2: –í–µ–±–∏–Ω–∞—Ä—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
                                   reply_markup=kb.school_subscription_training)
     

@router.callback_query(F.data == 'my_subscriptions_traning')
async def my_subscriptions_traning(callback: CallbackQuery):
     await callback.message.delete()
     await callback.answer('')
     await callback.message.answer('–ü–æ–¥–ø–∏—Å–∫–∞: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ\n\n\n–í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã/—á–∞—Ç—ã;\n1. –ö–∞–Ω–∞–ª 1\n2. –ì—Ä—É–ø–ø–∞ 1\n3. –ö–∞–Ω–∞–ª 2\n\n\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É/—á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ',
                                   reply_markup=kb.my_subscriptions_traning)
     
# Admin

@router.message(Command('admin'))
async def start_admin(message: Message):
     try:
          await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
     except Exception as e:
          print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
          
     if message.from_user.id in ADMIN_IDS:
          await message.answer('üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                               reply_markup=kb.admin)
     else:
          await message.answer(f'–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.{message.from_user.id}')


@router.callback_query(F.data == 'admin')
async def admin(callback: CallbackQuery):
     await callback.message.delete()
     await callback.answer('')
     await callback.message.answer('üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                   reply_markup=kb.admin)

@router.callback_query(F.data == 'subscription_management')
async def subscription_management(callback: CallbackQuery):
     await callback.message.delete()
     await callback.answer('')
     await callback.message.answer('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:',
                                   reply_markup=kb.subscription_management)

# –ü—Ä–æ—Ü–µ—Å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data == 'add_subscription')
async def add_subscription(callback: CallbackQuery, state: FSMContext):
     await callback.message.delete()
     await callback.answer('')
     await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:')
     await state.set_state(SubscriptionForm.name)

@router.message(SubscriptionForm.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:")
    await state.set_state(SubscriptionForm.description)

@router.message(SubscriptionForm.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
    await state.set_state(SubscriptionForm.id_channels)
    
# —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
@router.message(SubscriptionForm.id_channels)
async def process_channels(message: Message, state: FSMContext):
     input_text = message.text.strip()
     raw_ids = [channel.strip() for channel in input_text.split(',')]
     full_ids = []

     for cid in raw_ids:
          if not cid.startswith("-"):
           cid = f"-{cid}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
          if not re.fullmatch(r"^-100\d{5,}$", cid):
               await message.answer(f"–ù–∞ –ö–∞–Ω–∞–ª {cid} –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
               return

          try:
            chat_member = await message.bot.get_chat_member(cid, message.bot.id)
          except (TelegramForbiddenError, TelegramBadRequest):
            await message.answer(f"–ù–∞ –ö–∞–Ω–∞–ª {cid} –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
            return

          if chat_member.status not in ['administrator', 'creator']:
            await message.answer(f"–ù–∞ –ö–∞–Ω–∞–ª {cid} –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
            return

          full_ids.append(cid)

    # –°–æ—Ö—Ä–∞–Ω
     combined_ids = ",".join(full_ids)
     await state.update_data(id_channels=combined_ids)
     data = await state.get_data()

     async with async_session() as session:
          new_sub = Subscription(
               name=data['name'],
               description=data['description'],
               id_channels=combined_ids,
               user_id=message.from_user.id
          )
          session.add(new_sub)
          await session.commit()

     await message.answer(
        f"–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']},\n–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n–ö–∞–Ω–∞–ª—ã: {combined_ids}",
        reply_markup=kb.add_subscription
     )

     await state.clear()

     
# ----------------------------------------------
# 
@router.callback_query(F.data == 'user_management')
async def user_management(callback: CallbackQuery):
     await callback.message.delete()
     await callback.answer('')
     await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                   reply_markup=kb.user_management)
     

@router.callback_query(F.data == 'user_list')
async def add_subscription(callback: CallbackQuery):
     async with async_session() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()

     await callback.message.delete()
     await callback.answer('')
     
     text = ''
     for user in users:
         text += (
             f"{user.id}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.user_name}\n"
             f"- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.user_id}\n"
             f"- –¢–µ–ª–µ—Ñ–æ–Ω: +{user.user_phone}\n"
             f"- Gmail: {user.user_email}\n"
             '\n\n'
         )

     await callback.message.answer(text, reply_markup=kb.user_list)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data == 'edit_subscription')
async def edit_subscription(callback: CallbackQuery):
     await callback.message.delete()
     await callback.answer('')
     await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
                                   reply_markup=await kb.edit_subscription())
     
# –†–∞–±–æ—Ç–∞ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
# –ª–æ–≤–∏—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å sub_
@router.callback_query(lambda c: c.data.startswith("sub_"))
# –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç callback data.
async def show_subscription_details(callback: CallbackQuery):
     # –∏–∑–≤–ª–µ–∫–∞–µ–º id –∏–∑ callback data.
     sub_id = int(callback.data.split("_")[1])
     # –ø–µ—Ä–µ–¥–∞—ë–º id –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
     keyboard = kb.get_subscription_detail_keyboard(sub_id)
     #  –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
     await callback.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø–æ–¥–ø–∏—Å–∫–µ ¬´–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ¬ª??", reply_markup=keyboard)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –∂–¥—ë—Ç –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
class EditSubscription(StatesGroup):
    waiting_for_new_value = State()

# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫, –≥–¥–µ callback_data –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:
@router.callback_query(lambda c: c.data.startswith(("name_", "description_", "channels_")))
# –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç callback –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def ask_new_value(callback: CallbackQuery, state: FSMContext):
     # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ "_", –ø–æ–ª—É—á–∞–µ–º
     # field = name, description, channels
     # sub_id = id
     field, sub_id = callback.data.split("_")
     
     async with async_session() as session:
          #  –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.  –ò—â–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –Ω—É–∂–Ω—ã–º ID.
          result = await session.execute(select(Subscription).where(Subscription.id == sub_id))
          subscription = result.scalar_one_or_none()

     #  –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º (–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö.
     await state.update_data(sub_id=int(sub_id), field=field)

     # –ü—Ä–æ—Å—Ç–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ), –∫–∞–∫–æ–µ –∏–º–µ–Ω–Ω–æ –ø–æ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç.
     field_names = {
         "name": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:",
         "description": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:",
         "channels": f"""
–¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ¬´{subscription.name}¬ª: 
{subscription.id_channels}
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ  ID –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ. –ò –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
     }
     # —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
     await callback.message.delete()
     await callback.message.answer(f"{field_names[field]}")
     # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
     await state.set_state(EditSubscription.waiting_for_new_value)


# –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –±–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_new_value
@router.message(EditSubscription.waiting_for_new_value)
async def process_new_value(message: Message, state: FSMContext):
     # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (sub_id, field)
     data = await state.get_data()
     sub_id = data["sub_id"]
     field = data["field"]
     # –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
     new_value = message.text
 
     async with async_session() as session:
          #  –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.  –ò—â–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –Ω—É–∂–Ω—ã–º ID.
          result = await session.execute(select(Subscription).where(Subscription.id == sub_id))
          subscription = result.scalar_one_or_none()
          # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:
          if not subscription:
              await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
              await state.clear()
              return

          # –ú–µ–Ω—è–µ–º –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ
          if field == "name":
               subscription.name = new_value
               await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ¬´{new_value}¬ª.",
               reply_markup=kb.back_sub)
          elif field == "description":
               subscription.description = new_value
               await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ¬´{new_value}¬ª.",
               reply_markup=kb.back_sub)
          elif field == "channels":
               raw_ids = [cid.strip() for cid in new_value.split(',')]
               full_ids = []

               for cid in raw_ids:
                    if not cid.startswith("-"):
                        cid = f"-{cid}"

                    if not re.fullmatch(r"^-100\d{5,}$", cid):
                        await message.answer(f"–ù–∞ –ö–∞–Ω–∞–ª {cid} –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
                        return

                    try:
                        chat_member = await message.bot.get_chat_member(cid, message.bot.id)
                    except (TelegramForbiddenError, TelegramBadRequest):
                        await message.answer(f"–ù–∞ –ö–∞–Ω–∞–ª {cid} –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
                        return

                    if chat_member.status not in ['administrator', 'creator']:
                        await message.answer(f"–ù–∞ –ö–∞–Ω–∞–ª {cid} –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
                        return

                    full_ids.append(cid)

               valid_ids = ", ".join(full_ids)
               subscription.id_channels = valid_ids
               await message.answer(f"–ö–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ù–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã: {valid_ids}.",
               reply_markup=kb.back_sub)

          await session.commit()

     # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     await state.clear()

# –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.
@router.callback_query(F.data == 'hide_subscription')
async def hide_subscription(callback: CallbackQuery):
     await callback.message.delete()
     await callback.answer('')
     await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å:',
                                   reply_markup=await kb.hide_subscription())
     
@router.callback_query(lambda c: c.data.startswith("hide_"))
async def hide_subscription(callback: CallbackQuery):
     hide_id = int(callback.data.split("_")[1])
     async with async_session() as session:
          result = await session.execute(select(Subscription).where(Subscription.id == hide_id))
          subscription = result.scalars().first()
          subscription.is_hidden = True

          sub_name = subscription.name
          await session.commit()


          await callback.message.edit_text(f'–ü–æ–¥–ø–∏—Å–∫–∞ ¬´{sub_name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã—Ç–∞. –û–Ω–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–æ –≤—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è.',
                                           reply_markup=kb.back_sub)

@router.callback_query(F.data == 'restore_subscription')
async def restore_subscription(callback: CallbackQuery):
     await callback.message.delete()
     await callback.answer('')
     await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:',
                                   reply_markup=await kb.restore_subscription())
     

@router.callback_query(lambda c: c.data.startswith("res_"))
async def res_subscription(callback: CallbackQuery):
     res_id = int(callback.data.split('_')[1])

     async with async_session() as session:
          result = await session.execute(select(Subscription).where(Subscription.id == res_id))
          subscription = result.scalars().first()
          subscription.is_hidden = False
          res_name = subscription.name
          await session.commit()

          await callback.message.edit_text(f'–ü–æ–¥–ø–∏—Å–∫–∞ ¬´{res_name}¬ª —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.',
                                        reply_markup=kb.back_sub)
          
@router.callback_query(F.data == "delete_subscription")
async def delete_subscription(callback: CallbackQuery):
     await callback.message.delete()
     await callback.answer('')
     await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', 
                                   reply_markup=await kb.delete_subscription())
     

@router.callback_query(lambda c: c.data.startswith('del_'))
async def del_subscription(callback: CallbackQuery):
     del_id = int(callback.data.split('_')[1])

     async with async_session() as session:
          result = await session.execute(select(Subscription).where(Subscription.id == del_id))
          subscription = result.scalars().first()
          sub_name = subscription.name

          await callback.message.edit_text(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ¬´{sub_name}¬ª? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
                                        reply_markup=await kb.delete__sub(del_id))
          
@router.callback_query(lambda c: c.data.startswith('delete_'))
async def delete_sub(callback: CallbackQuery):
     del_id = int(callback.data.split('_')[1])
     async with async_session() as session:
          result = await session.execute(select(Subscription).where(Subscription.id == del_id))
          subscription = result.scalars().first()

          if subscription:
               await session.execute(delete(Subscription).where(Subscription.id == del_id))
               await session.commit()
               await callback.message.edit_text(f'–ü–æ–¥–ø–∏—Å–∫–∞ ¬´{subscription.name}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.',
                                                reply_markup=kb.back_sub)



